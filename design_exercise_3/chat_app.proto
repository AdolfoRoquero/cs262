// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless  by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// python -m grpc_tools.protoc -I=. --python_out=. --pyi_out=.  --grpc_python_out=. ./chat_app.proto

syntax = "proto3";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "io.grpc.examples.chatAPP";
option java_outer_classname = "ChatAppProto";
option objc_class_prefix = "CAP";

package chatapp;

// Interface exported by the server.
service ChatApp {

  // Request to log in User into the platform 
  // if the username already exists.
  rpc Login(User) returns (RequestReply); 

  // Request to sign up new User into the platform 
  // (only if the username is not taken).
  rpc SignUp(User) returns (RequestReply); 

  // Request to list all users in the platform 
  // that match a given filter in ListAllRequest.
  rpc ListAll(ListAllRequest) returns (UserList); 
  
  // Request to delete User.
  rpc DeleteUser(User) returns (RequestReply);

  // Request to send a message (all sending info contained in ChatMessage)
  rpc SendMessage(ChatMessage) returns (RequestReply);

  // Request to receive ALL pending messages for a given user. 
  rpc ReceiveMessage(User) returns (stream ChatMessage);

  //  Request to update replica state when a new user signs up.
  rpc NewUser_StateUpdate(User) returns (RequestReply); 
  
  //  Request to update replica state when a user is deleted.
  rpc DeleteUser_StateUpdate(User) returns (RequestReply); 

  // Request to update replica state when a message is sent (message enqueuing).
  rpc EnqueueMessage_StateUpdate(ChatMessage) returns (RequestReply); 
  
  // Request to update replica state when a message is received (message dequeuing).
  rpc DequeueMessage_StateUpdate(User) returns (RequestReply);

  rpc CheckLiveness(LivenessRequest) returns (LivenessResponse);

}

// enumeration of possible RequestStatuses
enum RequestStatus {
    SUCCESS = 0;
    FAILED = 1;
    REROUTED = 2;
}

// message RequestReply
// Standard object for Server message replies indicating the 
// status of the request
message RequestReply {
    optional string reply = 1; 
    RequestStatus request_status = 2;
    optional string rerouted = 3; 
}

// message User
// Represents the User object (only username in this case)
message User {
    string username = 1; // Username (uniquely identifies user)
}

// message UserList
// Represents a list of User objects 
// It is used when fetching a list of users (Listall) 
// and to declare a list of destinataries
message UserList {
    repeated User users = 1; // List of Users
    optional RequestStatus request_status = 2; 
    optional string rerouted = 3; 
}

// message ListAllRequest
// Represents the query information for ListAll queries.
message ListAllRequest {
    string username_filter = 1; 
}

// message ChatMessage
// Represent the Message object with the text content and 
// metadata (sender, destinataries and timestamp)
message ChatMessage {
    User sender = 1;  // Sender user of the message.
    UserList destinataries = 2; // Destinatary users of the message.
    string text = 3; // Text body of the message.
    google.protobuf.Timestamp date = 4; // Datetime at which message is sent.
    optional RequestStatus request_status = 5; 
    optional string rerouted = 6;  
}

message LivenessRequest{
    // no fields needed 
}

message LivenessResponse {
    string status = 1;
  }
  