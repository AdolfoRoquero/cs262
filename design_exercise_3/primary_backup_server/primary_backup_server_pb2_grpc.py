# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import primary_backup_server_pb2 as primary__backup__server__pb2


class PrimaryBackupServerStub(object):
    """Interface exported by the server.
    This service implrements a primary backup server whose state only has users and messages

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewUser = channel.unary_unary(
                '/primarybackupserver.PrimaryBackupServer/NewUser',
                request_serializer=primary__backup__server__pb2.User.SerializeToString,
                response_deserializer=primary__backup__server__pb2.RequestReply.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/primarybackupserver.PrimaryBackupServer/DeleteUser',
                request_serializer=primary__backup__server__pb2.User.SerializeToString,
                response_deserializer=primary__backup__server__pb2.RequestReply.FromString,
                )
        self.EnqueueMessage = channel.unary_unary(
                '/primarybackupserver.PrimaryBackupServer/EnqueueMessage',
                request_serializer=primary__backup__server__pb2.Message.SerializeToString,
                response_deserializer=primary__backup__server__pb2.RequestReply.FromString,
                )
        self.DequeueMessage = channel.unary_unary(
                '/primarybackupserver.PrimaryBackupServer/DequeueMessage',
                request_serializer=primary__backup__server__pb2.Message.SerializeToString,
                response_deserializer=primary__backup__server__pb2.RequestReply.FromString,
                )


class PrimaryBackupServerServicer(object):
    """Interface exported by the server.
    This service implrements a primary backup server whose state only has users and messages

    """

    def NewUser(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnqueueMessage(self, request, context):
        """Request enqueue a message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DequeueMessage(self, request, context):
        """Request to dequeue a message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrimaryBackupServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewUser': grpc.unary_unary_rpc_method_handler(
                    servicer.NewUser,
                    request_deserializer=primary__backup__server__pb2.User.FromString,
                    response_serializer=primary__backup__server__pb2.RequestReply.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=primary__backup__server__pb2.User.FromString,
                    response_serializer=primary__backup__server__pb2.RequestReply.SerializeToString,
            ),
            'EnqueueMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.EnqueueMessage,
                    request_deserializer=primary__backup__server__pb2.Message.FromString,
                    response_serializer=primary__backup__server__pb2.RequestReply.SerializeToString,
            ),
            'DequeueMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DequeueMessage,
                    request_deserializer=primary__backup__server__pb2.Message.FromString,
                    response_serializer=primary__backup__server__pb2.RequestReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'primarybackupserver.PrimaryBackupServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PrimaryBackupServer(object):
    """Interface exported by the server.
    This service implrements a primary backup server whose state only has users and messages

    """

    @staticmethod
    def NewUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/primarybackupserver.PrimaryBackupServer/NewUser',
            primary__backup__server__pb2.User.SerializeToString,
            primary__backup__server__pb2.RequestReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/primarybackupserver.PrimaryBackupServer/DeleteUser',
            primary__backup__server__pb2.User.SerializeToString,
            primary__backup__server__pb2.RequestReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnqueueMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/primarybackupserver.PrimaryBackupServer/EnqueueMessage',
            primary__backup__server__pb2.Message.SerializeToString,
            primary__backup__server__pb2.RequestReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DequeueMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/primarybackupserver.PrimaryBackupServer/DequeueMessage',
            primary__backup__server__pb2.Message.SerializeToString,
            primary__backup__server__pb2.RequestReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
